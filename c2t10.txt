import cv2
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import matplotlib.patches as patches
import tkinter as tk
from tkinter import simpledialog
import math

# Define the temperature range
min_temperature = 17
max_temperature = 42

# Add initial 10pixel diameter orange circle
nose_circle = patches.Circle((0, 0), 5, linewidth=1, edgecolor='orange', facecolor='none')
plt.gca().add_patch(nose_circle)

# Add initial 50x20 green rectangle
forehead_box = patches.Rectangle((0, 0), 50, 20, linewidth=1, edgecolor='green', facecolor='none')
plt.gca().add_patch(forehead_box)

# Define the shape (box or circle) for each ROI type
roi_shapes = {
    "nose": "circle",
    "forehead": "box"
}

# Define the sizes for each ROI type
roi_sizes = {
    "nose": (10, 10),
    "forehead": (50, 20)
}

# Modify the nose ROI to be a 10-pixel diameter circle
nose_diameter = 10
roi_sizes["nose"] = (nose_diameter, nose_diameter)

# Initialize the selected ROI type to "nose"
selected_roi_type = "nose"

def get_temperature(pixel_value, min_value, max_value):
    # Convert the pixel value to a temperature within the specified range and normalize pixel values
    temperature = min_temperature + (pixel_value / 255) * (max_temperature - min_temperature)
    return temperature

# Load the image in grayscale
####################################################################################################
image_path = 'C:\\Users\\mirko\\Documents\\Coding\\temp\\imgs\\trial.png'
####################################################################################################
image_name = os.path.basename(image_path)
gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Apply Gaussian blur for image smoothing
smooth_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Create an empty DataFrame to store the coordinates, names, and temperatures
data = pd.DataFrame(columns=['X', 'Y', 'ROI Type', 'Temperature'])

# Lists to store the clicked points, rectangles, temperature annotations, and names
clicked_points = []
rectangles = []
circles = [nose_circle]
temperature_annotations = []
names = []

# Function to prompt for the ROI type using a pop-up window
def get_roi_type():
    root = tk.Tk()
    root.withdraw()
    roi_type = simpledialog.askstring("ROI Type", "Enter the ROI type (nose or forehead):")
    root.destroy()
    return roi_type

def calculate_average_temperature(x, y):
    roi_type = selected_roi_type  # Get the current selected ROI type

    if roi_shapes[roi_type] == "circle":
        # For the "nose" ROI (circle), calculate the visible ROI dimensions to fit the circular shape
        roi_diameter = roi_sizes[roi_type][0]
        visible_roi_radius = roi_diameter // 2

        # Calculate the distance of each pixel from the center of the "nose" circle
        y_indices, x_indices = np.ogrid[:gray_image.shape[0], :gray_image.shape[1]]
        distances = np.sqrt((x_indices - x) ** 2 + (y_indices - y) ** 2)

        # Create a mask to include only pixels within the "nose" circle
        mask = distances <= visible_roi_radius

        # Apply the mask to the grayscale image to get the circular area
        area = gray_image[mask]
    else:
        # For other ROIs (e.g., "forehead" - box), calculate the visible ROI dimensions as before
        roi_width, roi_height = roi_sizes[roi_type]
        x_start = x - roi_width // 2
        y_start = y - roi_height // 2
        visible_roi_width = min(roi_width, gray_image.shape[1] - x_start)
        visible_roi_height = min(roi_height, gray_image.shape[0] - y_start)
        area = gray_image[y_start:y_start + visible_roi_height, x_start:x_start + visible_roi_width]

    temperatures = [get_temperature(pixel_value, 0, 255) for pixel_value in area.flatten()]
    return np.mean(temperatures)




# Event handler for mouse click events
def on_click(event):
    global selected_roi_type  # Use the global variable

    if event.button == 1:  # Left mouse button
        if event.inaxes is not None:
            x, y = int(event.xdata), int(event.ydata)
            roi_type = get_roi_type().lower()

            # Check if the ROI type is valid (nose or forehead)
            if roi_type not in roi_sizes:
                print("Invalid ROI type. Please choose 'nose' or 'forehead'.")
                return

            # Set the selected ROI type
            selected_roi_type = roi_type

            # Calculate the average temperature for the given ROI
            average_temperature = calculate_average_temperature(x, y)

            # Draw circle around the selected area for "nose"
            if selected_roi_type == "nose":
                circle_radius = roi_sizes[selected_roi_type][0] // 2
                circle = patches.Circle((x, y), circle_radius, edgecolor='red', linewidth=1, facecolor='none')
                plt.gca().add_patch(circle)
                circles.append(circle)  # Append the circle to the list for future reference
            else:
                # For "forehead," draw a rectangle as before
                box_width, box_height = roi_sizes[selected_roi_type]
                rect = patches.Rectangle((x - box_width // 2, y - box_height // 2), box_width, box_height, edgecolor='red', linewidth=1, facecolor='none')
                plt.gca().add_patch(rect)
                rectangles.append(rect)

            # Update temperature display
            annotation = update_temperature_display(x, y, selected_roi_type, average_temperature)
            temperature_annotations.append(annotation)

            # Store the coordinates, ROI type, and temperature in the DataFrame
            data.loc[len(data)] = [x, y, selected_roi_type, average_temperature]

            # Refresh the plot to show changes
            plt.draw()


# Event handler for mouse movement events
def on_move(event):
    if event.inaxes is not None:
        x, y = int(event.xdata), int(event.ydata)
        
        circle_radius = roi_sizes["nose"][0] // 2
        circles[0].center = (x, y)
        
        # Calculate the coordinates for the green box (50x20 forehead ROI size)
        forehead_width, forehead_height = roi_sizes["forehead"]
        x_forehead = x - forehead_width // 2
        y_forehead = y - forehead_height // 2
        
        # Update the position of the green box (forehead)
        forehead_box.set_xy((x_forehead, y_forehead))

        # Refresh the plot to show changes
        plt.draw()



# Event handler for mouse scroll events
def on_scroll(event):
    # Check if the scroll event is triggered over the image
    if event.inaxes is not None and event.inaxes.images:
        # Get the current axis limits
        xlim = plt.gca().get_xlim()
        ylim = plt.gca().get_ylim()

        # Scale the axis limits based on the scroll direction
        if event.button == 'down':
            scale_factor = 1.3
        else:
            scale_factor = 0.8

        # Calculate the new axis limits relative to the cursor position
        x = event.xdata
        y = event.ydata
        new_xlim = (xlim - x) * scale_factor + x
        new_ylim = (ylim - y) * scale_factor + y

        # Set the new axis limits
        plt.gca().set_xlim(new_xlim)
        plt.gca().set_ylim(new_ylim)

        # Refresh the plot to show changes
        plt.draw()

# Define a function to update the temperature display
def update_temperature_display(x, y, name, temperature):
    truncated_temperature = round(temperature, 1)
    return plt.gca().annotate(f"{name}: {truncated_temperature}Â°C", xy=(x, y), xytext=(x + 30, y - 30),
                              color='white', ha='left', va='bottom',
                              arrowprops=dict(arrowstyle='-', color='red', alpha=0.7),
                              bbox=dict(facecolor='red', alpha=0.7))

# Display the smoothed image
plt.imshow(smooth_image, cmap='gray')
plt.axis('off')


# Connect the event handlers to the figure
plt.gcf().canvas.mpl_connect('button_press_event', on_click)
plt.gcf().canvas.mpl_connect('motion_notify_event', on_move)
plt.gcf().canvas.mpl_connect('scroll_event', on_scroll)

# Show the plot
plt.show()

# Save the DataFrame as an Excel file
data.to_excel(f'temperature_data_{image_name}.xlsx', index=False)
